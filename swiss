#!/usr/bin/ruby

$LOAD_PATH << './lib'

require 'rubygems'
require 'thor'
require 'configuration'

require 'lib/initialize'
require 'lib/import'
require 'lib/export'

# This method is included in the Rails Env., so we have to define it here...
class String
	def starts_with?(prefix)
	  prefix = prefix.to_s
	  self[0, prefix.length] == prefix
	end
end

class Swiss < Thor

	desc "configure", "Check the configuration"
	def configure
		if !File.exists?("config.rb")
			print "** Hey!  It looks like this is your first time running swiss.\n"
			print "** Before we get started, you'll need to create a config.ru.\n"
		else
			Kernel.load 'config.rb'
			c = Configuration.for 'swiss'

			print "\n"
			print "---\n"
			print "*\n"
			print "* Welcome to swiss!\n"
			print "*\n"
			print "* - A project management system in a directory."
			print "\n\n"
			help
		end
	end

	desc "add", "Add a new project"
	method_options :type => :string
	def add(project_name)
		init = SwissLib::Initialize.new
		project_path = init.initialize_project project_name, options[:type]
		project_path = File.expand_path(project_path)

		print "\n"
		print "*** Project successfully initialized at: " + project_path + "\n"
		print "**  Path copied to clipboard.\n\n"
		`echo #{project_path} | pbcopy`
	end

	desc "export [PROJECT_NAME]", "Export a project"
	def export(project_name)
		export = SwissLib::Export.new
		project_path = export.export_wordpress_project project_name, "new_host", "new_mysql_db", "new_mysql_user", "new_mysql_pass", "new_db_host"

		require 'fileutils'

		files = []
		Dir.glob(File.join(project_path, "zips", "*.zip")) do |f|
			FileUtils.mv(f, "zips")
			files << f
		end

		print "\n"
		print "*** Project successfully exported!\n"
		files.each { |f| print "** zips/" + File.basename(f) + "\n" }
	end

	desc "import [PROJECT_NAME]", "Import a project"
	method_options :zipfile => :string
	def import(project_name)
	    import = SwissLib::Import.new
	    import.import_project_from_zip project_name, options[:zipfile]
	end

	desc "list", "List available projects"
	def list
		types = Dir.glob('repos/*')

		types.each do |type|
			print "\n"
			print "* #{File.basename(type).capitalize} Projects\n\n"

			projects = Dir.glob(File.join(type, '*'))
			projects.each { |p| print "- #{File.basename(p)}\n" }
		end
	end

	desc "update", "Update the deployment scripts for all projects"
	def update

	end
end

Swiss.default_task("configure")
Swiss.start

